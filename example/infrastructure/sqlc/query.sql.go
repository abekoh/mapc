// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package sqlc

import (
	"context"
)

const getTask = `-- name: GetTask :one
SELECT id, user_id, title, description, story_point, registered_at, created_at, updated_at
FROM tasks
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id string) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.StoryPoint,
		&i.RegisteredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, created_at, updated_at
FROM users
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSubTasks = `-- name: ListSubTasks :many
SELECT id, task_id, user_id, title, description, registered_at, created_at, updated_at
FROM sub_tasks
WHERE id = ?
ORDER BY title
`

func (q *Queries) ListSubTasks(ctx context.Context, id string) ([]SubTask, error) {
	rows, err := q.db.QueryContext(ctx, listSubTasks, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubTask
	for rows.Next() {
		var i SubTask
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.RegisteredAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
SELECT id, user_id, title, description, story_point, registered_at, created_at, updated_at
FROM tasks
WHERE id = ?
ORDER BY title
`

func (q *Queries) ListTasks(ctx context.Context, id string) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.StoryPoint,
			&i.RegisteredAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, created_at, updated_at
FROM users
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const subTask = `-- name: SubTask :one
SELECT id, task_id, user_id, title, description, registered_at, created_at, updated_at
FROM sub_tasks
WHERE id = ?
LIMIT 1
`

func (q *Queries) SubTask(ctx context.Context, id string) (SubTask, error) {
	row := q.db.QueryRowContext(ctx, subTask, id)
	var i SubTask
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.RegisteredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
